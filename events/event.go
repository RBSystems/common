package events

import (
	"os"
	"strings"
	"sync"

	"github.com/byuoitav/common/log"
)

type Event struct {
	Hostname         string    `json:"hostname,omitempty"`
	Timestamp        string    `json:"timestamp,omitempty"`
	LocalEnvironment bool      `json:"localEnvironment,omitempty"`
	Event            EventInfo `json:"event,omitempty"`
	Building         string    `json:"building,omitempty"`
	Room             string    `json:"room,omitempty"`
}

// event info contains information about the event itself.
type EventInfo struct {
	Type           EventType  `json:"type"`
	Requestor      string     `json:"requestor"`
	EventCause     EventCause `json:"eventCause"`
	Device         string     `json:"device"`
	User           string     `json:"user"`
	DeviceID       string     `json:"device-id,omitempty"`
	EventInfoKey   string     `json:"eventInfoKey"`
	EventInfoValue string     `json:"eventInfoValue"`
}

// EVENT TYPES
type EventType uint16

const (
	ERROR EventType = iota
	DETAILSTATE
	CORESTATE
	USERACTION
	INFO
	HEARTBEAT
	HEALTH
	DIVISION
	DEPLOYMENT
)

func (e EventType) String() string {
	switch e {
	case ERROR:
		return "ERROR"
	case DETAILSTATE:
		return "DETAILSTATE"
	case CORESTATE:
		return "CORESTATE"
	case USERACTION:
		return "USERACTION"
	case INFO:
		return "INFO"
	case HEARTBEAT:
		return "HEARTBEAT"
	case HEALTH:
		return "HEALTH"
	case DIVISION:
		return "DIVISION"
	case DEPLOYMENT:
		return "DEPLOYMENT"
	}
	return ""
}

//EVENT CAUSE
type EventCause uint16

const (
	USERINPUT EventCause = iota
	AUTOGENERATED
	AWS
	INTERNAL
	STARTUP
	ROOMDIVISION
)

func (e EventCause) String() string {
	switch e {
	case USERINPUT:
		return "USERINPUT"
	case AUTOGENERATED:
		return "AUTOGENERATED"
	case AWS:
		return "AWS"
	case INTERNAL:
		return "INTERNAL"
	case STARTUP:
		return "STARTUP"
	case ROOMDIVISION:
		return "ROOMDIVISION"
	}
	return ""
}

// make sure we only get the pi hostname once
var once sync.Once
var hostname string

func GetPiHostname() string {
	once.Do(func() {
		hostname = os.Getenv("PI_HOSTNAME")
		if len(hostname) == 0 {
			log.Fatalf("failed to get pi hostname. Is it set?")
		}
	})

	return hostname
}

// functions to get data about device, based off of environment variables
func GetBuildingFromHostname() string {
	return strings.Split(GetPiHostname(), "-")[0]
}

func GetRoomFromHostname() string {
	return strings.Split(GetPiHostname(), "-")[1]
}

func GetDeviceNameFromHostname() string {
	return strings.Split(GetPiHostname(), "-")[2]
}

func GetDevHostname() string {
	//+deploy not_required
	return os.Getenv("DEVELOPMENT_HOSTNAME")
}
