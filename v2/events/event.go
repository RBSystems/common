package events

import (
	"strings"
	"time"
)

/*
	Event Tags const declarations
*/
const (
	HEARTBEAT   = "heartbeat"
	CORESTATE   = "core-state"
	DETAILSTATE = "detail-state"

	USERGENERATED = "user-generated"
	AUTOGENERATED = "autogenerated"
)

type Event struct {
	//GeneratingSystem is the system actually generating the event. i.e. For an API call against a raspberry pi this would be the hostname of the raspberry pi running the AV-API. If the call is against AWS, this would be 'AWS'
	GeneratingSystem string `json:"generating-system`

	//Timestamp is the time the event took place
	Timestamp time.Time `json:"timestamp"`

	//EventTags is a collection of strings to give more information about what kind of event this is, used in routing and processing events. See the EventTags const delcaration for some common tags.
	EventTags []string `json:"event-tags"`

	//TargetDevice is the device being affected by the event. e.g. a power on event, this would be the device powering on
	TargetDevice BasicDeviceInfo `json:"target-device"`

	//TargetRoom is the room being affected by the event. e.g. in events arising from an API call this is the room called in the API
	TargetRoom BasicRoomInfo `json:"target-room"`

	//Key of the event
	Key string `json:"key"`

	//value of the event
	Value string `json:"value"`

	//Data is an optional field to dump data that you wont necessarily want to aggregate on, but you may want to search on
	Data string `json:"data,omitempty"`
}

type BasicDeviceInfo struct {
	BuildingID string `json:"buildingID,omitempty"`
	RoomID     string `json:"roomID,omitempty"`
	DeviceID   string `json:"deviceID,omitempty"`
}

type BasicRoomInfo struct {
	BuildingID string `json:"buildingID,omitempty"`
	RoomID     string `json:"roomID,omitempty"`
}

func GenerateBasicDeviceInfo(deviceID string) BasicDeviceInfo {
	vals := strings.Split(deviceID, "-")
	if len(vals) != 3 {
		return BasicDeviceInfo{Device: deviceID}
	}

	return BasicDeviceInfo{
		Building: vals[0],
		Room:     vals[0] + "-" + vals[1],
		Device:   deviceID,
	}
}

//CheckTags just checks the list of tags for an given tag to see if it is present.
func HasTag(e Event, t string) bool {
	for i := range e.EventTags {
		if e.EventTags[i] == t {
			return true
		}
	}
	return false
}
